buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath(group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true) {
            exclude group: 'trove', module: 'trove'
        }
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'kotlin'
apply plugin: 'com.jfrog.bintray'

version = "${mod_version}"
group = 'io.github.hnosmium0001.cute'
archivesBaseName = "${mod_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"
//     makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
//     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                deep_mining {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                deep_mining {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'deep_mining', '--all', '--output', file('src/generated/resources/')

            mods {
                deep_mining {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name "CurseForge"
        url "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation "kottle:Kottle:$kottle_version"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "hnOsmium0001",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"hnOsmium0001",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

bintray {
    user = findProperty('bintray.user')
    key = findProperty('bintray.apiKey')
    publications = ['BintrayPublication']
    pkg {
        repo = 'Maven'
        name = 'cute'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/hnOsmium0001/cute.git'
        version {
            name = "$project.version"
            released = new Date()
        }
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        BintrayPublication(MavenPublication) {
            artifact reobfArtifact
            groupId project.group
            artifactId 'cute'
            version project.version
        }
    }
}
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xinline-classes"]
    }
}
